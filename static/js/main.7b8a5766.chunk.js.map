{"version":3,"sources":["components/AddScreen.js","components/AllScreen.js","utils/constant.js","pages/MainContainer.js","components/ShortCut.js","utils/listner.js","utils/callback.js","pages/Screen.js","App.js","index.js"],"names":["AddScreen","addScreen","useState","screenName","setScreenName","className","type","placeholder","onChange","e","target","value","onClick","AllScreen","screens","length","map","doc","to","pathname","id","name","SCREENS_DATA","MainContainer","setScreens","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","screenObj","uuid","shortCuts","data","ShortCut","obj","index","shortcutStr","desc","listener","keypress","Listener","callbackFn","turnGreen","elm","document","getElementById","getElementsByClassName","innerHTML","style","backgroundColor","turnRed","turnYellow","listnerInstance","this","cb","simple_combo","arr","register_many","reset","Screen","props","location","setShortcutStr","setDesc","setCb","setData","a","setScreenData","find","setInitialShortCuts","history","goBack","callerFn","registerScreenListner","onChangeHandler","addShortCutObj","forEach","push","shortCutStr","trim","some","toLowerCase","alert","addListner","Object","keys","App","exact","path","render","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.7b8a5766.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst AddScreen = ({ addScreen }) => {\n\n    const [screenName, setScreenName] = useState(\"\");\n\n    const onChangeHandler = (e) => {\n        setScreenName(e.target.value);\n    }\n\n    const addScreenHandler = () => {\n        if (screenName !== \"\") {\n            addScreen(screenName);\n            setScreenName(\"\");\n        }\n    }\n\n    return (\n        <div className=\"marginT50\">\n            <h3>Add Screen</h3>\n            <div className=\"dFelx\">\n                <div className=\"ui input margin10\">\n                    <input type=\"text\" placeholder=\"Screen Name...\" onChange={onChangeHandler} value={screenName} />\n                </div>\n                <button className='ui button margin10 blue' onClick={addScreenHandler}>Add Screen</button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default AddScreen;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst AllScreen = ({ screens }) => {\n\n    if (!screens || !screens.length) return null;\n\n    return (\n        <div className=\"screen-grid\">\n            {\n                screens.map(doc => (\n                    <div key={doc.id} className=\"cp\">\n                        <Link to={{\n                            pathname: `screen/${doc.id}`,\n                            id: doc.id\n                        }}>\n                            <div className=\"screen-wrap\">\n                                <div className=\"light1\">Your Custom Screen - <span className=\"bold font30\">{doc.name}</span></div>\n                            </div>\n                        </Link>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default AllScreen;","export const SCREENS_DATA = 'screens';\n","import React, { useState, useEffect } from 'react';\nimport AddScreen from '../components/AddScreen';\nimport AllScreen from '../components/AllScreen';\nimport { v4 as uuid } from 'uuid';\nimport { SCREENS_DATA } from '../utils/constant';\n\nconst MainContainer = () => {\n    const [screens, setScreens] = useState([]);\n\n    useEffect(() => {\n        setScreens(JSON.parse(localStorage.getItem(SCREENS_DATA)));\n    }, [])\n\n    useEffect(() => {\n        if (screens && screens.length > 0) {\n            localStorage.setItem(SCREENS_DATA, JSON.stringify([...screens]));\n        }\n    }, [screens])\n\n    const addScreen = (name) => {\n        const screenObj = {\n            id: uuid(),\n            name: name,\n            shortCuts: []\n        }\n\n        const data = screens && screens.length ? [...screens, screenObj] : [screenObj];\n        setScreens(data);\n    }\n\n    return (\n        <div className='ui container'>\n            <AddScreen\n                addScreen={addScreen}\n            />\n            <AllScreen screens={screens} />\n        </div>\n    )\n}\n\nexport default MainContainer;","import React from 'react';\n\nconst ShortCut = ({ obj, index }) => {\n    return (\n        <a className=\"item\" key={`list_${index}`}>\n            <i className=\"right triangle icon\"></i>\n            <div className=\"content\">\n                <div className=\"header\">{obj.shortcutStr}</div>\n                <div className=\"description\">{obj.desc}</div>\n            </div>\n        </a>\n    )\n}\n\nexport default ShortCut;","import keypress from 'keypress.js';\nconst listener = new keypress.Listener();\n\nclass Listner {\n    constructor() {\n        this.listener = listener;\n    }\n\n    addListner(shortcutStr, desc, cb) {\n        return this.listener.simple_combo(shortcutStr, () => cb(desc));\n    }\n\n    registerScreenListner(arr) {\n        this.listener.register_many(arr)\n    }\n\n    reset() {\n        this.listener.reset();\n    }\n}\n\nexport default Listner;\n","import React from 'react';\n\nexport const callbackFn = {\n    turnGreen: (desc) => {\n        const elm = document.getElementById('displayBox');\n        const content = elm.getElementsByClassName('content')[0];\n        content.innerHTML = desc;\n        elm.style.backgroundColor = 'green';\n    },\n    turnRed: (desc) => {\n        const elm = document.getElementById('displayBox');\n        const content = elm.getElementsByClassName('content')[0];\n        content.innerHTML = desc;\n        elm.style.backgroundColor = 'red';\n    },\n    turnYellow: (desc) => {\n        const elm = document.getElementById('displayBox');\n        const content = elm.getElementsByClassName('content')[0];\n        content.innerHTML = desc;\n        elm.style.backgroundColor = 'yellow';\n    },\n}","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport ShortCut from '../components/ShortCut';\nimport Listner from '../utils/listner';\nimport { SCREENS_DATA } from '../utils/constant';\nimport { callbackFn } from '../utils/callback';\n\n// Creating an instance of Listner Class\nconst listnerInstance = new Listner();\n\n\nconst Screen = (props) => {\n    const { location } = props;\n    const { id } = location;\n    const [shortcutStr, setShortcutStr] = useState(\"\");\n    const [desc, setDesc] = useState(\"\");\n    const [cb, setCb] = useState(\"\");\n    const [data, setData] = useState([]);\n    const [screens, setScreens] = useState([]);\n\n    useEffect(() => {\n        if (screens && screens.length > 0) {\n            localStorage.setItem(SCREENS_DATA, JSON.stringify([...screens]));\n        }\n    }, [screens])\n\n    useEffect(() => {\n        // initial data setup\n        const callerFn = async () => {\n            const data = await JSON.parse(localStorage.getItem(SCREENS_DATA));\n            setScreens(data);\n            setScreenData(data);\n            if (data && data.length > 0) {\n                const screenObj = data.find((obj) => {\n                    return obj.id === id\n                })\n                if (screenObj) {\n                    setInitialShortCuts(screenObj);\n                    setData(screenObj);\n                } else {\n                    props.history.goBack();\n                }\n            }\n        }\n        callerFn();\n    }, []);\n\n    useEffect(() => {\n        // unregistration of the events\n        listnerInstance.reset();\n    }, [])\n\n    const setInitialShortCuts = (screenObj) => {\n        // register all the current screen's events at initial load\n        const arr = screenObj && screenObj.shortCuts.map((elm) => {\n            return {\n                \"on_keydown\": () => {\n                    callbackFn[elm.cb] && callbackFn[elm.cb](elm.desc);\n                },\n                \"keys\": elm.shortcutStr,\n            }\n        })\n        listnerInstance.registerScreenListner(arr);\n    }\n\n    const setScreenData = (data) => {\n        if (data && data.length > 0) {\n            const screenObj = data.find((obj) => {\n                return obj.id === id\n            })\n            setData(screenObj);\n        }\n    }\n\n    const onChangeHandler = (type, value) => {\n        switch (type) {\n            case 'shortcutStr':\n                setShortcutStr(value);\n                break;\n            case 'desc':\n                setDesc(value);\n                break;\n            case 'cb':\n                setCb(value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const checkIfShortCutExist = (shortCutStr) => {\n        if (data && data.shortCuts && data.shortCuts.length > 0) {\n            return data.shortCuts.some((elm) => {\n                return elm.shortcutStr.trim().toLowerCase() === shortCutStr.trim().toLowerCase()\n            })\n        }\n        return false;\n    }\n\n    const addShortCutHandler = () => {\n        // register a new event from user input\n        if (shortcutStr !== \"\" && desc !== \"\" && cb !== \"\") {\n            const isExist = checkIfShortCutExist(shortcutStr.trim());\n            if (isExist) {\n                alert('Shortcut already exists...');\n                return;\n            }\n\n            const response = listnerInstance.addListner(shortcutStr.trim(), desc, callbackFn[cb]); // response can be undefined or Object\n            if (!response) {\n                alert('Something went wrong !!  It seems like you have not entered relavant details');\n            } else {\n                addShortCutObj({\n                    shortcutStr,\n                    desc,\n                    cb\n                });\n            }\n            setShortcutStr(\"\");\n            setDesc(\"\");\n            setCb(\"\");\n        } else {\n            alert('Please fill all the fields *')\n        }\n    }\n\n    const addShortCutObj = (obj) => {\n\n        screens.forEach((elm) => {\n            if (elm.id === id) {\n                elm.shortCuts.push(obj);\n            }\n        })\n        setScreenData([...screens]);\n        setScreens([...screens]);\n    }\n\n    function getShortCuts(shortCuts) {\n        return shortCuts.map((obj, index) => {\n            return (\n                <ShortCut obj={obj} index={index} />\n            )\n        })\n    }\n\n    function getCallBackString() {\n        return Object.keys(callbackFn).map((elm, index) => {\n            return (\n                <div className=\"item\" id={`cb_${index}`}>\n                    <div className=\"header\">{elm}</div>\n                </div>\n            )\n        })\n    }\n\n    return (\n        <div className='ui container'>\n            <div className=\"marginTB20\">\n                <Link to=\"/\">\n                    <button className=\"ui button blue\">GO BACK</button>\n                </Link>\n            </div>\n            <div className=\"dFlex sb\">\n                {\n                    data && data.shortCuts && data.shortCuts.length > 0 &&\n                    <>\n                        <div>\n                            <h4 className=\"margin10 bb\">{`List Of Shortcuts For Your Selected Screen - ${data && data.name}`}</h4>\n                            <div className=\"ui list margin10\">\n                                {getShortCuts(data.shortCuts)}\n                            </div>\n                        </div>\n                        <div className=\"width50\">\n                            <h4 className=\"margin10 bb\">Result Box</h4>\n                            <div className=\"ui cards displayBox\" id=\"displayBox\">\n                                <div className=\"card\">\n                                    Description:\n                                    <div className=\"content\"></div>\n                                </div>\n                            </div>\n                        </div>\n                    </>\n                }\n            </div>\n\n            <div className=\"margin10 marginT50\">\n                <h2>Create Your ShortCut</h2>\n                <div className=\"dFlex column\">\n                    <div className=\"ui input labeled margin10\">\n                        <div className=\"ui label\">\n                            Shortcut\n                        </div>\n                        <input type=\"text\" placeholder=\"shift y\" onChange={(e) => onChangeHandler('shortcutStr', e.target.value)} value={shortcutStr} />\n                    </div>\n                    <div className=\"ui input labeled margin10\">\n                        <div className=\"ui label\">\n                            Description\n                        </div>\n                        <input type=\"text\" placeholder=\"description\" onChange={(e) => onChangeHandler('desc', e.target.value)} value={desc} />\n                    </div>\n                    <div className=\"ui input labeled margin10\">\n                        <div className=\"ui label\">\n                            Callback Fn\n                        </div>\n                        <input type=\"text\" placeholder=\"turnYellow/turnGreen/turnRed\" onChange={(e) => onChangeHandler('cb', e.target.value)} value={cb} />\n                    </div>\n                    <button className='ui button blue half-width width50' onClick={addShortCutHandler}>Add Short Cut</button>\n                </div>\n            </div>\n\n            <div className=\"margin10\">\n                <h4 className=\"bb\">Available Callback  : </h4>\n                <div>\n                    <div className=\"ui list\">\n                        {getCallBackString()}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Screen;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport MainContainer from './pages/MainContainer';\nimport Screen from './pages/Screen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <h1 className=\"bb5\">Keyboard Shortcut Library</h1>\n        <Switch>\n          <Route exact path='/' render={(props) => (<MainContainer{...props} />)} />\n          <Route exact path='/screen/:id' render={(props) => (<Screen{...props} />)} />\n          <Screen />\n        </Switch>\n      </Router>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}